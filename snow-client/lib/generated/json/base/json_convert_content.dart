// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:snowclient/data/entity/rsp_login_entity.dart';
import 'package:snowclient/generated/json/rsp_login_entity_helper.dart';
import 'package:snowclient/data/entity/req_register_entity.dart';
import 'package:snowclient/generated/json/req_register_entity_helper.dart';
import 'package:snowclient/data/entity/rsp_credential_entity.dart';
import 'package:snowclient/generated/json/rsp_credential_entity_helper.dart';
import 'package:snowclient/data/entity/user_entity.dart';
import 'package:snowclient/generated/json/user_entity_helper.dart';
import 'package:snowclient/data/entity/req_login_entity.dart';
import 'package:snowclient/generated/json/req_login_entity_helper.dart';
import 'package:snowclient/data/entity/req_user_entity.dart';
import 'package:snowclient/generated/json/req_user_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case RspLoginEntity:
			return rspLoginEntityFromJson(data as RspLoginEntity, json) as T;			case ReqRegisterEntity:
			return reqRegisterEntityFromJson(data as ReqRegisterEntity, json) as T;			case RspCredentialEntity:
			return rspCredentialEntityFromJson(data as RspCredentialEntity, json) as T;			case UserEntity:
			return userEntityFromJson(data as UserEntity, json) as T;			case ReqLoginEntity:
			return reqLoginEntityFromJson(data as ReqLoginEntity, json) as T;			case ReqUserEntity:
			return reqUserEntityFromJson(data as ReqUserEntity, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case RspLoginEntity:
			return rspLoginEntityToJson(data as RspLoginEntity);			case ReqRegisterEntity:
			return reqRegisterEntityToJson(data as ReqRegisterEntity);			case RspCredentialEntity:
			return rspCredentialEntityToJson(data as RspCredentialEntity);			case UserEntity:
			return userEntityToJson(data as UserEntity);			case ReqLoginEntity:
			return reqLoginEntityToJson(data as ReqLoginEntity);			case ReqUserEntity:
			return reqUserEntityToJson(data as ReqUserEntity);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'RspLoginEntity':
			return RspLoginEntity().fromJson(json);			case 'ReqRegisterEntity':
			return ReqRegisterEntity().fromJson(json);			case 'RspCredentialEntity':
			return RspCredentialEntity().fromJson(json);			case 'UserEntity':
			return UserEntity().fromJson(json);			case 'ReqLoginEntity':
			return ReqLoginEntity().fromJson(json);			case 'ReqUserEntity':
			return ReqUserEntity().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'RspLoginEntity':
			return List<RspLoginEntity>();			case 'ReqRegisterEntity':
			return List<ReqRegisterEntity>();			case 'RspCredentialEntity':
			return List<RspCredentialEntity>();			case 'UserEntity':
			return List<UserEntity>();			case 'ReqLoginEntity':
			return List<ReqLoginEntity>();			case 'ReqUserEntity':
			return List<ReqUserEntity>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}